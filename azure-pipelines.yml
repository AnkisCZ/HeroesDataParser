jobs:
- template: azure-pipelines-template.yml
  parameters:
    name: Linux
    pool:
      vmImage: 'ubuntu-16.04'

- template: azure-pipelines-template.yml
  parameters:
    name: macOS
    pool:
      vmImage: 'macOS-10.14'
  
- template: azure-pipelines-template.yml
  parameters:
    name: Windows
    pool:
      vmImage: 'windows-2019'
    
- job: Artifacts
  dependsOn:
    - Linux
    - macOS
    - Windows
  pool:
    vmImage: 'windows-2019'
  variables:
    - group: secret
  steps:
    - task: DownloadSecureFile@1
      displayName: Download cert
      inputs:
        secureFile: certificate

    - task: DotNetCoreInstaller@0
      displayName: dotnet installer 2.2.401
      inputs:
        version: '2.2.401'

    - task: NuGetToolInstaller@0
      displayName: nuget installer 5.1.0
      inputs:
        versionSpec: '5.1.0' 
              
    - powershell: dotnet publish HeroesData\heroesdata.csproj -c release -o .\bin\publish\any\
      displayName: Publish release [fdd-any]

    - powershell: dotnet pack HeroesData\heroesdata.csproj -c release --no-build -o .\bin\nupkg\any\       
      displayName: Nuget pack [fdd-any]

    - task: NuGetCommand@2
      displayName: Sign nuget pack
      inputs:
        command: 'custom'
        arguments: 'sign HeroesData\bin\nupkg\any\HeroesDataParser.*.nupkg -CertificatePath $(Agent.TempDirectory)\certificate -CertificatePassword $(cert_password) -Timestamper http://timestamp.digicert.com'
        
    - powershell: |
        $csproj = get-content HeroesData\HeroesData.csproj
        $sv = $csproj | select-string -pattern "<Version>"
        $spv = $csproj | select-string -pattern "<PackageVersion>"
        $sv -match "<Version>(?<content>.*)</Version>"
        $version = $matches['content'] + "-build.$(Build.BuildNumber)"
        $csproj.replace($sv, "<Version>$version</Version>") | out-file HeroesData\HeroesData.csproj
        $csproj.replace($spv, "<PackageVersion>$version</PackageVersion>") | out-file HeroesData\HeroesData.csproj
        echo "Version - $version"
      displayName: Non-master version build number
      condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
      
    - powershell: |
        (get-content HeroesData\HeroesData.csproj).Replace('<PackAsTool>true</PackAsTool>','<PackAsTool>false</PackAsTool>') | out-file HeroesData\HeroesData.csproj
        $s = get-content HeroesData\HeroesData.csproj | select-string -pattern "<PackageVersion>"
        $s -match "<PackageVersion>(?<content>.*)</PackageVersion>"
        $m = $matches['content']        
        echo "##vso[task.setvariable variable=version]$m"
        echo "Package version - $m"
      displayName: SCD Prep

    - powershell: dotnet publish HeroesData\heroesdata.csproj -c release --self-contained false -r win-x64 -o .\bin\publish\fde\win-x64\
      displayName: Publish release [fde-win-x64]

    - powershell: dotnet publish HeroesData\heroesdata.csproj -c release --self-contained false -r osx-x64 -o .\bin\publish\fde\osx-x64\
      displayName: Publish release [fde-osx-x64]

    - powershell: dotnet publish HeroesData\heroesdata.csproj -c release --self-contained false -r linux-x64 -o .\bin\publish\fde\linux-x64\
      displayName: Publish release [fde-linux-x64]
      
    - powershell: dotnet publish HeroesData\heroesdata.csproj -c release --self-contained true -r win-x64 -o .\bin\publish\scd\win-x64\
      displayName: Publish release [scd-win-x64]

    - powershell: dotnet publish HeroesData\heroesdata.csproj -c release --self-contained true -r osx-x64 -o .\bin\publish\scd\osx-x64\
      displayName: Publish release [scd-osx-x64]

    - powershell: dotnet publish HeroesData\heroesdata.csproj -c release --self-contained true -r linux-x64 -o .\bin\publish\scd\linux-x64\
      displayName: Publish release [scd-linux-x64]
 
    - task: ArchiveFiles@2
      displayName: Archive [fdd-any]
      inputs:
        archiveType: zip
        rootFolderOrFile: 'HeroesData\bin\publish\any\'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fdd-any.zip'
        
    - task: ArchiveFiles@2
      displayName: Archive [fde-win-x64]
      inputs:
        archiveType: zip
        rootFolderOrFile: 'HeroesData\bin\publish\fde\win-x64\'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-win-x64.zip'

    - task: ArchiveFiles@2
      displayName: Archive [fde-osx-x64]
      inputs:
        archiveType: zip
        rootFolderOrFile: 'HeroesData\bin\publish\fde\osx-x64\'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-osx-x64.zip'

    - task: ArchiveFiles@2
      displayName: Archive [fde-linux-x64]
      inputs:
        archiveType: zip
        rootFolderOrFile: 'HeroesData\bin\publish\fde\linux-x64\'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-linux-x64.zip'
        
    - task: ArchiveFiles@2
      displayName: Archive [scd-win-x64]
      inputs:
        archiveType: zip
        rootFolderOrFile: 'HeroesData\bin\publish\scd\win-x64\'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-win-x64.zip'

    - task: ArchiveFiles@2
      displayName: Archive [scd-osx-x64]
      inputs:
        archiveType: zip
        rootFolderOrFile: 'HeroesData\bin\publish\scd\osx-x64\'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-osx-x64.zip'

    - task: ArchiveFiles@2
      displayName: Archive [scd-linux-x64]
      inputs:
        archiveType: zip
        rootFolderOrFile: 'HeroesData\bin\publish\scd\linux-x64\'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-linux-x64.zip'

    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fdd-any]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fdd-any.zip'
        artifactName: 'HeroesDataParser-fdd-any'
  
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fde-win-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-win-x64.zip'
        artifactName: 'HeroesDataParser-fde-win-x64'  
 
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fde-osx-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-osx-x64.zip'
        artifactName: 'HeroesDataParser-fde-osx-x64'  

    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [fde-linux-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-fde-linux-x64.zip'
        artifactName: 'HeroesDataParser-fde-linux-x64'  
        
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [scd-win-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-win-x64.zip'
        artifactName: 'HeroesDataParser-scd-win-x64'  
 
    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [scd-osx-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-osx-x64.zip'
        artifactName: 'HeroesDataParser-scd-osx-x64'  

    - task: PublishBuildArtifacts@1
      displayName: Publish artifacts [scd-linux-x64]
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)\HeroesDataParser.$(version)-scd-linux-x64.zip'
        artifactName: 'HeroesDataParser-scd-linux-x64'  
        
    - task: PublishBuildArtifacts@1
      displayName: Publish artifact [nuget-fdd-any]
      inputs:
        pathtoPublish: 'HeroesData\bin\nupkg\any\'
        artifactName: 'HeroesDataParser-nuget-fdd-any'
  
